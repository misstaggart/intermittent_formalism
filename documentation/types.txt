Inductive boptype :=
  Plus
| Sub
| Mult
| Div
| Mod
| Or
| And.

Inductive value :=
    Nat (n: nat)
  | Bool (b: bool)
  | error. 

map: A -> (A -> A -> bool) -> (A -> value)

Inductive array :=
  Array (s: string) (l: nat).

Used to mark smallvars for volatile or nonvolatile storage
Inductive volatility :=
  nonvol
 | vol.

Inductive exp :=
  Var (s: string) (q: volatility)  these are the smallvars
| Val (v: value)
| Bop (bop: boptype) (e1: exp) (e2: exp) 
| El (a: array) (e: exp).

el: {x: exp | x is an element of an array, x has a natural
			value index, x's index is in bounds}

loc: {x | x is a smallvar or x is an el}

warvar: {x | x is a smallvar or x is an array}
warvars: list warvar

Inductive instruction :=
  skip
| asgn_sv (x: smallvar) (e: exp) 
| asgn_arr (a: array) (i: exp) (e: exp) (*i is index, e is new value of a[i]*)
| incheckpoint (w: warvars)
| inreboot.

Inductive command :=
  Ins (l: instruction)
| Seqcom (l: instruction) (c: command)                                 
| ITE (e: exp) (c1: command) (c2: command).

Base of memory mapping
Notation mem := (map loc eqb_loc).

Inductive nvmem := (*nonvolatile memory*)
  NonVol (m : mem) (D: warvars). 

Inductive vmem := (*volatile memory*)
  Vol (m : mem).

Inductive cconf := (*continuous configuration*)
  ContinuousConf (triple: nvmem * vmem * command).

Notation context := (nvmem * vmem * command). 

Notation iconf := (context * nvmem * vmem * command).

Definition ro := loc * value. (*read observation*)
Definition readobs := list ro.

Inductive obs := (*observation*)
  Obs (r: readobs)
| reboot
| checkpoint.

Notation obsseq := (list obs).
