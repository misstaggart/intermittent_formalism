Types that record information, determine correctness of programs in the modelled language

(*written, read, written before reading*)
the_write_stuff : ((list loc) * (list loc) * (list loc)).

Variables read from when evaluating an expression:
rd: exp -> warvars -> prop

checking WAR soundess of evaluating an instruction (2.1):
warcheck: nvmem -> warvars -> warvars -> instruction -> warvars -> warvars -> P

checking WAR soundess of executing a command (2.1):
WARok:  nvmem -> warvars -> warvars -> command -> P

(3.1)
Where
O1 is a sequence of read observation lists,
where each continguous read observation list is separated from those adjacent to it by a reboot,
and O2 is a read observation list,
prefix_seq determines if each ro list in O1 is a valid
prefix of O2
prefix_seq: obseq -> readobs -> Prop

(* Where
O1 is a sequence of ((read observation list sequences), where
each continguous read observation list is separated from those adjacent to it
by a reboot), where each sequence is separated from those adjacent to it by a checkpoint.
ie, each read observation list in a given read observation sequence
occurs within the same checkpointed region as all the other read observation lists in that sequence,
O2 is a read observation list,
prefix_frag determines if each ro list in O1 is a prefix of some FRAGMENT of O2
(where the fragments are separated by the positioning of the checkpoints in O1)
 *)
prefix_fragment: obseq -> readobs -> Prop

Program Traces:
(*The trace type contains
1. starting configuration
2. ending configuration
3. execution observations
4. a list of warvars which have been written to
5. a list of warvars which have been read from
6. a list of warvars which have been written to before they have been read from
 *)
(*Ordering: start -> observations -> end -> the_write_stuff*)

continuous traces:
trace_c: context -> context -> obseq -> the_write_stuff -> Prop

intermittent traces:
trace_i : iconf -> iconf -> obseq -> the_write_stuff -> Prop

same_pt N0 V0 c0 c1 N1 Ncomp holds if, starting in state (N0, V0, c0),
if an intermittent execution progresses to (N1, _, c1) and a continuous
execution progresses to (Ncomp, _, c1), memory N1 is "correct" wrt Ncomp.
same_pt: nvmem -> vmem -> command -> command -> nvmem -> nvmem -> Prop

current_init_pt N V1 c N1 N0 holds if, starting from (N0, _, _), an intermittent execution with checkpoint (N, _, _) that has proceeded to state (N1, V1, c) is correct wrt N0.
current_init_pt: nvmem -> vmem -> command -> nvmem -> nvmem -> Prop

same_config Sigma sigma holds if the intermittent configuration Sigma is correct wrt to the continuous configuration sigma
same_config: iconf -> context -> Prop

